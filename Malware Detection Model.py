#!/usr/bin/env python
# coding: utf-8

# In[15]:


import pandas as pd
import pickle
df=pd.read_csv(r'data/dataset_malwares.csv')
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.plotting import scatter_matrix
import warnings
warnings.filterwarnings('ignore')
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
df.head(5)


# In[16]:


plt.figure(figsize=(8, 6))

ax=sns.countplot(df['Malware'])
ax.set_xticklabels(['Benign', 'Malware'])


# In[17]:


used_data = df.drop(['Name', 'Machine', 'TimeDateStamp', 'Malware'], axis=1)

# feature extraction
model = RandomForestClassifier(n_estimators=12,random_state=42)
model.fit(used_data, df['Malware'])


importance = model.feature_importances_
importance_dict = {used_data.columns.values[i]: importance[i] for i in range (len(importance))}
sorted_dict = {k: v for k, v in sorted(importance_dict.items(), key=lambda item: item[1])}
plt.figure(figsize=(10, 20))
sns.barplot(y=list(sorted_dict.keys())[::-1], x=list(sorted_dict.values())[::-1], palette='mako')
plt.title('Features importance')


# In[18]:


features=[#'MajorSubsystemVersion',
          #'ImageBase',
          #'MinorOperatingSystemVersion',
          #'Subsystem',
          'Characteristics',
          #'MinorSubsystemVersion',
          #'MajorLinkerVersion',
          'SizeOfStackReserve',
          'SectionMinEntropy',
          #'SectionMaxChar',
          #'MajorImageVersion',
          'DllCharacteristics',
          #'MinorImageVersion',
          #'SizeOfInitializedData',
        'SizeOfHeaders'
        #'SizeOfImage'
         ]


# In[19]:


i=1

for feature in features:
    plt.figure(figsize=(15, 15))
    ax1 = plt.subplot(len(features), 2, i)
    sns.distplot(df[df['Malware']==1][feature], ax=ax1, kde_kws={'bw': 0.1})
    ax1.set_title(f'Malware', fontsize=10)
    ax2 = plt.subplot(len(features), 2, i+1)
    sns.distplot(df[df['Malware']==0][feature], ax=ax2, kde_kws={'bw': 0.1})
    ax2.set_title(f'Benign', fontsize=10)
    i= i+2


# In[20]:


#Train the model, predict classes on test data and calculate prediction scores

X_train, X_test, y_train, y_test = train_test_split(used_data[features], df['Malware'], test_size=0.2, random_state=42)
#X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.33, random_state=42)

#val_df=X_val.join(y_val)

#pd.DataFrame(val_df).to_csv('validation_data.csv')

print(f'Number of used features is {X_train.shape[1]}')

clf=RandomForestClassifier(random_state=42,max_depth=20)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware']))

ax=sns.heatmap(confusion_matrix(y_pred, y_test), annot=True, fmt="d", cmap=plt.cm.Blues, cbar=False)
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')


# In[21]:


pkl_filename = "malware_detection.pkl"
with open(pkl_filename, 'wb') as file:
    pickle.dump(clf, file)

